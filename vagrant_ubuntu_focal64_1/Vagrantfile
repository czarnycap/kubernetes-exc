Vagrant.configure("2") do |config|
  config.vm.provider :virtualbox do |v|
    v.memory = 2048
    v.cpus = 2
  end
  config.vm.provision :shell, privileged: true, inline: $common_tools


  config.vm.define :master do |master|
    master.vm.box = "ubuntu/focal64"
    master.vm.hostname = "master"
    master.vm.network :private_network, ip: "192.168.56.11"
    master.vm.network "public_network"
    master.vm.provision :shell, privileged: true, inline: $provision_cri
    master.vm.provision :shell, privileged: false, inline: $provision_master_node
    master.vm.provision :shell, privileged: false, inline: $install_flannel

    
  end

  # %w{worker1 worker2}.each_with_index do |name, i|
  #   config.vm.define name do |worker|
  #     worker.vm.box = "ubuntu/focal64"
  #     worker.vm.hostname = name
  #     worker.vm.network :private_network, ip: "192.168.56.#{i + 12}"
  #     worker.vm.network "public_network"
  #     worker.vm.provision :shell, privileged: true, inline: $join_worker

  #   end
  # end

end

$common_tools = <<-SCRIPT
# bridged traffic to iptables is enabled for kube-router.
cat >> /etc/ufw/sysctl.conf <<EOF
net/bridge/bridge-nf-call-ip6tables = 1
net/bridge/bridge-nf-call-iptables = 1
net/bridge/bridge-nf-call-arptables = 1
EOF
# disable swap
swapoff -a
sed -i '/swap/d' /etc/fstab
export DEBIAN_FRONTEND=noninteractive
apt-get update 
apt-get install -y git ebtables ethtool curl apt-transport-https docker.io

curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
cat <<EOF >/etc/apt/sources.list.d/kubernetes.list
deb http://apt.kubernetes.io/ kubernetes-xenial main
EOF


apt-get update
apt-get install -y kubelet kubeadm kubectl

SCRIPT

$provision_cri = <<-CRIEOF
# Install GO and cri###
git clone https://github.com/Mirantis/cri-dockerd.git --progress

wget https://storage.googleapis.com/golang/getgo/installer_linux
chmod +x ./installer_linux
./installer_linux
source ~/.bash_profile

cd cri-dockerd
mkdir bin
go build -o bin/cri-dockerd
mkdir -p /usr/local/bin
install -o root -g root -m 0755 bin/cri-dockerd /usr/local/bin/cri-dockerd
cp -a packaging/systemd/* /etc/systemd/system
sed -i -e 's,/usr/bin/cri-dockerd,/usr/local/bin/cri-dockerd,' /etc/systemd/system/cri-docker.service
systemctl daemon-reload
systemctl enable cri-docker.service
systemctl enable --now cri-docker.socket
# remove above if fails

CRIEOF

$provision_master_node = <<-MASTER

# creating join.sh script which can be accessible and executed by worker nodes
OUTPUT_FILE=/vagrant/join.sh
rm -rf $OUTPUT_FILE
sudo kubeadm init --apiserver-advertise-address=192.168.56.11 --pod-network-cidr=10.244.0.0/16 --cri-socket=/var/run/cri-dockerd.sock| grep "kubeadm join" > ${OUTPUT_FILE}
chmod +x $OUTPUT_FILE
# Configure kubectl
mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config
# Fix kubelet IP
echo 'Environment="KUBELET_EXTRA_ARGS=--node-ip=192.168.56.11"' | sudo tee -a /etc/systemd/system/kubelet.service.d/10-kubeadm.conf

MASTER

$install_flannel = <<-FLAN
wget https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml
kubectl apply -f kube-flannel.yml
sudo systemctl daemon-reload
sudo systemctl restart kubelet
kubectl taint nodes master node-role.kubernetes.io/control-plane-
FLAN

$join_worker = <<-WORKER
sh /vagrant/join.sh
systemctl daemon-reload
systemctl restart kubelet
WORKER