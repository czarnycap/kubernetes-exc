##############################################################
# TODO
### flanel changes as it doesn't work well with https://github.com/flannel-io/flannel/blob/master/Documentation/troubleshooting.md
### 
###
# fix join.sh script 
### release 0.9.0
### automatically assigned bridge network


Vagrant.configure("2") do |config|
    config.vm.provider :virtualbox do |v|
        v.memory = 2048
        v.cpus = 2
    end
    config.vm.provision :shell, privileged: true, inline: $common_tools
    config.vm.provision :shell, privileged: true, inline: $provision_cri

    config.vm.define :master do |master|
    master.vm.box = "ubuntu/focal64"
    master.vm.hostname = "master"
    master.vm.network :private_network, ip: "192.168.56.11"
    # master.vm.network "public_network" 
    master.vm.network "public_network", bridge: "#$default_network_interface"
    master.vm.provision :shell, privileged: false, inline: $provision_master_node
    master.vm.provision :shell, privileged: false, inline: $install_flannel
    master.vm.provision :shell, privileged: false, inline: $check_k8s_config
    
end

%w{worker1}.each_with_index do |name, i|
    config.vm.define name do |worker|
    worker.vm.box = "ubuntu/focal64"
    worker.vm.hostname = name
    worker.vm.network :private_network, ip: "192.168.56.#{i + 12}"
    worker.vm.network "public_network", bridge: "#$default_network_interface"
    worker.vm.provision :shell, privileged: true, inline: $join_worker

    end
end


end

$default_network_interface = `ip route | awk '/^default/ {printf "%s", $5; exit 0}'`

$common_tools = <<-SCRIPT
# bridged traffic to iptables is enabled for kube-router.
cat >> /etc/ufw/sysctl.conf <<EOF
net/bridge/bridge-nf-call-ip6tables = 1
net/bridge/bridge-nf-call-iptables = 1
net/bridge/bridge-nf-call-arptables = 1
EOF
# disable swap
swapoff -a
sed -i '/swap/d' /etc/fstab
export DEBIAN_FRONTEND=noninteractive
# disabled apt get update
# apt-get update 
apt-get install -y curl 
curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
cat <<EOF >/etc/apt/sources.list.d/kubernetes.list
deb http://apt.kubernetes.io/ kubernetes-xenial main
EOF
apt-get update
apt-get install -y apt-transport-https docker.io kubelet kubeadm kubectl git ebtables ethtool
SCRIPT

$provision_cri = <<-CRIEOF
# Install GO and cri###
git clone https://github.com/Mirantis/cri-dockerd.git --progress
wget https://storage.googleapis.com/golang/getgo/installer_linux
chmod +x ./installer_linux
./installer_linux
source ~/.bash_profile
cd cri-dockerd
mkdir bin
go build -o bin/cri-dockerd
mkdir -p /usr/local/bin
install -o root -g root -m 0755 bin/cri-dockerd /usr/local/bin/cri-dockerd
cp -a packaging/systemd/* /etc/systemd/system
sed -i -e 's,/usr/bin/cri-dockerd,/usr/local/bin/cri-dockerd,' /etc/systemd/system/cri-docker.service
systemctl daemon-reload
systemctl enable cri-docker.service
systemctl enable --now cri-docker.socket
# remove above if fails
CRIEOF

$provision_master_node = <<-MASTER
# creating join.sh script which can be accessible and executed by worker nodes
OUTPUT_FILE=/vagrant/join.sh
rm -rf $OUTPUT_FILE
# initialize master node
sudo kubeadm init --apiserver-advertise-address=192.168.56.11 --pod-network-cidr=10.244.0.0/16 --cri-socket=unix:///var/run/cri-dockerd.sock| grep "kubeadm join" > ${OUTPUT_FILE}
# appending join.sh script with cri socket and skiping verification
cat >> $OUTPUT_FILE <<EOF
--cri-socket=unix:///var/run/cri-dockerd.sock --discovery-token-unsafe-skip-ca-verification
EOF
chmod +x $OUTPUT_FILE
# Configure kubectl
mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config
# Fix kubelet IP
echo 'Environment="KUBELET_EXTRA_ARGS=--node-ip=192.168.56.11"' | sudo tee -a /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
MASTER

$install_flannel = <<-FLAN
# flannel required for networking in k8s cluster
wget https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml
kubectl apply -f kube-flannel.yml
sudo systemctl daemon-reload
sudo systemctl restart kubelet
kubectl taint nodes master node-role.kubernetes.io/control-plane-
FLAN

$join_worker = <<-WORKER
# executing joining script created on master node and accessible via shared folder /vagrant/ which is available on all hosts (master and workers)
sh /vagrant/join.sh
systemctl daemon-reload
systemctl restart kubelet
WORKER

$check_k8s_config = <<-KUBS
# create example Cluster
cat <<EOF > /home/vagrant/example-bar-ClusterIP.yaml
---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: example-bar
  namespace: default
  labels:
    app: example-bar
    deployment: bar
spec:
  replicas: 6
  selector:
    matchLabels:
      app: example-bar
  template:
    metadata:
      labels:
        app: example-bar
        deployment: bar
    spec:
      containers:
      - name: example-bar
        image: public.ecr.aws/nginx/nginx:latest
        command: [ "/bin/sh", "-c" ]
        args:
        - echo "bar - $HOSTNAME" > /usr/share/nginx/html/index.html;
          nginx -g "daemon off;";

---
apiVersion: v1
kind: Service
metadata:
  name: my-cluster-ip-service
spec:
  selector:
    app: example-bar
  type: ClusterIP
  ports:
  - name: http
    port: 80
    targetPort: 80
EOF
# apply it to k8s
kubectl apply -f /home/vagrant/example-bar-ClusterIP.yaml
echo "15 seconds wait"
wait 15
echo "trying to list pods from default namespace "
kubectl get pods --namespace=default -o wide

KUBS
